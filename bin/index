#!/usr/bin/env python

import sys
import json
import logging
import argparse

try: from urllib import parse as urlparse
except ImportError: # Python 2.x
    import urlparse

import requests

from index import errors
from index.parsers import post
from index.parsers import alias
from index.parsers import delete
from index.parsers import search


def setup_logging(log_levels, log_stream, **kwargs):
    '''
    Sets up basic logging.
    '''
    logging.basicConfig(
        level=min(log_levels),
        stream=log_stream,
    )


def not_implemented(*args, **kwargs):
    '''
    Simply raises a NotImplementedError.
    '''
    raise NotImplementedError('this feature has not been implemented')


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.set_defaults(log_levels=[logging.ERROR])

    parser.add_argument('--debug',
        action='append_const',
        dest='log_levels',
        const=logging.DEBUG,
        help='enable debugging logs',
    )

    parser.add_argument('--verbose',
        action='append_const',
        dest='log_levels',
        const=logging.INFO,
        help='enable verbose logs',
    )

    parser.add_argument('--log',
        dest='log_stream',
        metavar='LOGFILE',
        type=argparse.FileType('a'),
        default=sys.stdout,
        help='target log file',
    )

    # Add index and alias sub-commands.
    subparsers = parser.add_subparsers(
        title='commands',
        dest='command',
    )
    subparsers.required = True

    alias_subparser = subparsers.add_parser('alias',
        help='create an alias for a record',
    )
    alias_subparser.set_defaults(func=not_implemented)
    alias.config(alias_subparser)

    search_subparser = subparsers.add_parser('search',
        help='search for records',
    )
    search_subparser.set_defaults(func=not_implemented)
    search.config(search_subparser)

    post_subparser = subparsers.add_parser('post',
        help='create or update records',
    )
    post_subparser.set_defaults(func=not_implemented)
    post.config(post_subparser)

    delete_subparser = subparsers.add_parser('delete',
        help='delete a record or alias',
    )
    delete_subparser.set_defaults(func=not_implemented)
    delete.config(delete_subparser)

    # Parse command line arguments and set up for execution.
    args = parser.parse_args()

    setup_logging(**args.__dict__)

    logging.debug(args)

    # Grab whatever function has been declared for use and pass it everything.
    try: args.__dict__.pop('func')(**args.__dict__)
    except errors.BaseIndexError as err:
        status = err.code
        reason = str(err)
        logging.error('{status}:{reason}'.format(status=status, reason=reason))
        sys.exit(1)
